mainmodule iotest {
	include "ckio.h";
	#define TEST_FILE "readtest.txt"
	readonly CProxy_Main mainProxy;	 // the proxy to be used
	mainchare Main {
		entry Main(CkArgMsg*);
		entry void ready(Ck::IO::FileReadyMsg* msg);
		entry void startRead(Ck::IO::SessionReadyMsg* msg);
		

		entry void postClose(CkReductionMsg* msg){
			serial {
				ckout << "Entered the postClose function\n";
				// sleep (5);
				CkExit();
			}
		}
	
		entry void decrementCount() {
			serial {
				num_reads_done--;
				ckout << "decremented the count to " << num_reads_done << endl;
				if(!num_reads_done){
					CkCallback cb(CkIndex_Main::postClose(0), thisProxy);
					std::cout << "About to enter closing session\n";
					Ck::IO::closeReadSession(current_session, cb);
				}
			}

		}

		// method that verifies the read is correct
		entry void testRead(Ck::IO::ReadCompleteMsg* msg) {
			serial {
				ckout << "At offset " << msg -> offset << ":";
				char* seq_data = sequentialRead(msg -> offset, msg -> bytes);
				for(size_t i = 0; i< msg -> bytes; ++i){
					CkEnforce(seq_data[i] == msg -> data[i]);
				}
				delete[] seq_data;
				delete msg;	
				thisProxy.decrementCount();
			}

		}

		
		entry void startReading(){
			serial {
				ckout << "Starting the reading\n";
				Ck::IO::Options opts;
				opts.num_readers = 3;
				CkCallback open_cb(CkIndex_Main::ready(NULL), thisProxy);
				open_cb.setRefNum(0);
				Ck::IO::open(TEST_FILE, open_cb, opts);
			}
			// after the open call, invoke this as the callback
			when ready[0](Ck::IO::FileReadyMsg* msg) serial {
				 _file = msg -> file;
				 CkCallback start_read_session(CkIndex_Main::startRead(NULL), thisProxy);
				 start_read_session.setRefNum(0);
				 Ck::IO::startReadSession(_file, 100, 0, start_read_session); // load in 100 bytes from offset 0
			}
			// callback that is invoked after the read session is started
			when startRead[0](Ck::IO::SessionReadyMsg* msg) serial {
				current_session = msg -> session;
				CkCallback test_read_cb(CkIndex_Main::testRead(0), thisProxy);	
					
				readers = CProxy_Reader::ckNew(msg -> session, 10, 0, test_read_cb, 10); // create 5 readers which will each read 23 bytes and start from offset 5 i.e 0 will read bytes [5,28), 1 is [10, 33).

			}
		}
	}


	array [1D] Reader {
		entry Reader(Ck::IO::Session session, size_t bytes, size_t offsets, CkCallback after_read);
	}

}
#undef TEST_FILE
