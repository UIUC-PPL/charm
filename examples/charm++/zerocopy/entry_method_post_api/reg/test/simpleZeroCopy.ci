mainmodule simpleZeroCopy {

  readonly int numElements;

  mainchare Main {
    entry Main(CkArgMsg *m);
    entry [reductiontarget] void done();
  };

  array [1D] zerocopyObject{
    entry zerocopyObject();
    entry void testZeroCopy(CProxy_Main mProxy);

    entry void sdagRun() {
      serial {
        // send num arrays to its partner
        for(int i = 1; i <= num; i++)
          thisProxy[destIndex].sdagRecv(iter, iSize1, CkSendBuffer(iArr1copy, sdagCb), dSize2, CkSendBuffer(dArr2copy, sdagCb));
      }

      // wait for num arrays from partner
      for (j = 1; j <= num; j++){
        when sdagRecv[iter] (int iter, int n1, nocopypost int ptr1[n1], int n2, nocopypost double ptr2[n2]){

          serial {

           CkAssert(n1 == iSize1);
           CkAssert(n2 == dSize2);

            //CmiPrintf("[%d][%d][%d] sdagRecv actual method %p, %p and received are %p, %p\n", CmiMyPe(), CmiMyNode(), CmiMyRank(), iArr1, dArr2, ptr1, ptr2);
            // increment counter on receiving a sdagRecv
            sdagZeroCopyRecvCounter++;
            compareArray(iArr1, iArr1copy, n1);
            compareArray(dArr2, dArr2copy, n2);

            // check that all sends and recvs have completed and then advance
            //CmiPrintf("[%d][%d][%d] SdagRun recvcounter=%d, sentcounter=%d, num=%d\n", CmiMyPe(), CmiMyNode(), CmiMyRank(), sdagZeroCopyRecvCounter, sdagZeroCopySentCounter, num);
            if(sdagZeroCopySentCounter == 2*num && sdagZeroCopyRecvCounter == num)
              nextStep();
          }
        }
      }
    }

    entry void sdagZeroCopySent(CkDataMsg *msg);
    entry void sdagRecv(int iter, int n1, nocopypost int ptr1[n1], int n2, nocopypost double ptr2[n2]);
  };

}
