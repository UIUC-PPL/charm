mainmodule stencil3d {

  readonly CProxy_Main mainProxy;
#define PAPI_INST
#ifdef PAPI_INST
  readonly CProxy_PAPI_grp papi_arr;
#endif
  readonly int arrayDimX;
  readonly int arrayDimY;
  readonly int arrayDimZ;
  readonly int blockDimX;
  readonly int blockDimY;
  readonly int blockDimZ;

  readonly int num_chare_x;
  readonly int num_chare_y;
  readonly int num_chare_z;

  mainchare Main {
    entry Main(CkArgMsg *m);
    entry [reductiontarget] void report();
  };

  array [3D] Stencil {
    entry Stencil(void);
    entry void begin_iteration(void);
    entry void receiveGhosts(int iter, int dir, int height, int width,
        double ghosts[height*width]);

    entry [reductiontarget] void doStep() {
      serial "begin_iteration" {
        begin_iteration();
      }
#if 1
      for(imsg = 0; imsg < 6; imsg++) {
        // "iterations" keeps track of messages across steps
        when receiveGhosts[iterations] (int iter, int dir, int height,
            int width, double ghosts[height*width])
          serial "process_ghosts" {
            processGhosts(dir, height, width, ghosts);
          }
      }
#endif
      serial "do_work" {
        check_and_compute();
      }
    };
  };

#ifdef PAPI_INST
  group PAPI_grp {
    entry PAPI_grp(void);
    entry void start();
    entry void stop();
  };
#endif

  group BlockNodeMap : CkArrayMap {
    entry BlockNodeMap(int chare_dim);
  };
};
