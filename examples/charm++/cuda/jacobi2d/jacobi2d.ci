mainmodule jacobi2d {
  readonly CProxy_Main main_proxy;
  readonly CProxy_Block block_proxy;
  readonly int grid_size;
  readonly int block_size;
  readonly int n_chares;
  readonly int n_iters;
  readonly int warmup_iters;
  readonly bool sync_ver;
  readonly bool print;

  mainchare Main {
    entry Main(CkArgMsg* m);
    entry [reductiontarget] void initDone();
    entry [reductiontarget] void commDone();
    entry [reductiontarget] void updateDone();
    entry [reductiontarget] void done(double iter_agg_times);
    entry void printDone();
  };

  array [2D] Block {
    entry Block(void);
    entry void init();
    entry void initDone();
    entry void prepareGhostsDone();
    entry void receiveGhosts(int ref, int dir, int w, double gh[w]);
    entry void updateDone();

    entry void exchangeGhosts() {
      serial {
        iter_start_time = CkWallTimer();
        prepareGhosts();
      }

      // XXX: Can't do tag matching (which is not necessary here), a segfault occurs
      when prepareGhostsDone() {
        serial {
          sendGhosts();
        }
      }

      for (remote_count = 0; remote_count < neighbors; remote_count++) {
        when receiveGhosts[my_iter](int ref, int dir, int w, double buf[w]) {
          serial {
            processGhosts(dir, w, buf);
          }
        }
      }

      serial {
        if (sync_ver) {
          CkCallback cb(CkReductionTarget(Main, commDone), main_proxy);
          contribute(cb);
        } else {
          update();
        }
      }

      // XXX: Same here
      when updateDone() {
        serial {
          if (my_iter > warmup_iters) iter_agg_time += CkWallTimer() - iter_start_time;

          // Swap pointers
          std::swap(d_temperature, d_new_temperature);

          my_iter++;
          if (sync_ver) {
            CkCallback cb(CkReductionTarget(Main, updateDone), main_proxy);
            contribute(cb);
          } else {
            if (my_iter < warmup_iters + n_iters) {
              thisProxy[thisIndex].exchangeGhosts();
            } else {
              CkCallback cb(CkReductionTarget(Main, done), main_proxy);
              contribute(sizeof(double), &iter_agg_time, CkReduction::sum_double, cb);
            }
          }
        }
      }
    }

    entry void update();
    entry void print();
  };
};
