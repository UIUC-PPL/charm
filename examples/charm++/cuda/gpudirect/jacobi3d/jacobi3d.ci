mainmodule jacobi3d {
  include "jacobi3d.h";

  readonly CProxy_Main main_proxy;
  readonly CProxy_Block block_proxy;
  readonly int num_chares;
  readonly int grid_width;
  readonly int grid_height;
  readonly int grid_depth;
  readonly int block_width;
  readonly int block_height;
  readonly int block_depth;
  readonly int x_surf_count;
  readonly int y_surf_count;
  readonly int z_surf_count;
  readonly size_t x_surf_size;
  readonly size_t y_surf_size;
  readonly size_t z_surf_size;
  readonly int n_chares_x;
  readonly int n_chares_y;
  readonly int n_chares_z;
  readonly int n_iters;
  readonly int warmup_iters;
  readonly bool print_elements;

  mainchare Main {
    entry Main(CkArgMsg* m);
    entry [reductiontarget] void initDone();
    entry void startIter();
    entry [reductiontarget] void warmupDone();
    entry [reductiontarget] void allDone();
  };

  array [3D] Block {
    entry Block(void);
    entry void init();
    entry void packGhostsDone();
    entry void recvGhostReg(int ref, int dir, int count, DataType gh[count]);
    entry void updateDone();
    entry void print();

    entry void initDone() {
      serial {
        contribute(CkCallback(CkReductionTarget(Main, initDone), main_proxy));
      }
    }

    entry void run() {
      // Pack and send ghost data to neighbors
      serial {
        packGhosts();
      }

      when packGhostsDone() serial {
        sendGhosts();
      }

      // Receive ghost data from neighbors
      for (remote_count = 0; remote_count < neighbors; remote_count++) {
        when recvGhostReg[my_iter](int ref, int dir, int count, DataType buf[count]) {
          serial {
            processGhostReg(dir, count, buf);
          }
        }
      }

      // Perform Jacobian update
      serial {
        update();
      }
    }
  };
};
