mainmodule jacobi3d {
  readonly CProxy_Main mainProxy;
  readonly int arrayDimX;
  readonly int arrayDimY;
  readonly int arrayDimZ;
  readonly int blockDimX;
  readonly int blockDimY;
  readonly int blockDimZ;
  readonly int numChareX;
  readonly int numChareY;
  readonly int numChareZ;
  readonly int maxiterations;

  mainchare Main {
    entry Main(CkArgMsg *m);
    entry [reductiontarget] void done(int);
  };

  array [3D] Jacobi {
    entry Jacobi(void);
    entry void receiveGhosts(int ref, int dir, int w, int h, double gh[w*h]);

    entry void run() {
      while (iterations<maxiterations) {
        serial "begin_iteration" {
          begin_iteration();
        }
        for (remoteCount = 0; remoteCount < neighbors; remoteCount++) {
          when receiveGhosts[iterations](int ref, int dir, int w, int h, double buf[w*h]) serial {
            processGhosts(dir, w, h, buf);
          }
        }

        serial "compute" { 
          check_and_compute();
           if ((iterations>=maxiterations) &&
               thisIndex.x + thisIndex.y + thisIndex.z == 0) mainProxy.done(iterations);
        }
      }
    };
  };
};
