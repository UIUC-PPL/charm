module NDMeshStreamer {
  extern module completion;

  include "DataItemTypes.h";

  message MeshStreamerMessageV {
    int destinationPes[];
    int sourcePes[];
    std::uint16_t offsets[];
    CkArrayIndex destObjects[];
    char dataItems[];
  };

  template<class dtype, class RouterType>
  group [migratable] MeshStreamer {
    entry void localDeliver(size_t size, const char data[size], CkArrayIndex arrayId, int sourcePe);
    entry void receiveAlongRoute(MeshStreamerMessageV *msg);
    entry void enablePeriodicFlushing();
    entry void finish();
    entry void init(int numLocalContributors, CkCallback startCb,
                    CkCallback endCb, int prio,
                    bool usePeriodicFlushing);

    entry void init(int numContributors, CkCallback startCb,
                    CkCallback endCb, CProxy_CompletionDetector detector,
                    int prio, bool usePeriodicFlushing);
    entry void init(CkArrayID senderArrayID, CkCallback startCb,
                    CkCallback endCb, int prio,
                    bool usePeriodicFlushing);
    entry void init(CkCallback endCb, int prio);
    entry [reductiontarget] void syncInit();

    entry void receiveAtDestination(MeshStreamerMessageV *msg);
  };

  template<class dtype, class RouterType>
  nodegroup MeshStreamerNG : MeshStreamer<dtype, RouterType> {
    entry MeshStreamerNG(int numDimensions, int dimensionSizes[numDimensions],
                         CkArrayID clientAID, int bufferSize, bool yieldFlag,
                         double progressPeriodInMs, int maxItemsBuffered,
                         int _thresholdFractionNum, int _thresholdFractionDen,
                         int _cutoffFractionNum, int _cutoffFractionDen);
    entry void setGroupProxy(CProxy_MeshStreamer<dtype, RouterType> gp);
    entry void receiveAlongRoute(MeshStreamerMessageV *msg);
    entry void receiveAtDestination(MeshStreamerMessageV *msg);
  };

  template<class dtype, class ClientType, class RouterType, int (*EntryMethod)(char *, void *) = defaultMeshStreamerDeliver<dtype,ClientType> >
  group [migratable] GroupMeshStreamer : MeshStreamer<dtype, RouterType> {
    entry GroupMeshStreamer(CProxy_MeshStreamerNG<dtype, RouterType> ngProxy,
                            int numDimensions, int dimensionSizes[numDimensions],
                            CkGroupID clientGID, int bufferSize, bool yieldFlag,
                            double progressPeriodInMs, int maxItemsBuffered,
                            int _thresholdFractionNum, int _thresholdFractionDen,
                            int _cutoffFractionNum, int _cutoffFractionDen);
  };

  template<class dtype, class ClientType, class RouterType, int (*EntryMethod)(char *, void *) = defaultMeshStreamerDeliver<dtype,ClientType> >
  group [migratable] ArrayMeshStreamer :
  MeshStreamer<dtype, RouterType> {
    entry ArrayMeshStreamer(CProxy_MeshStreamerNG<dtype, RouterType> ngProxy,
                            int numDimensions, int dimensionSizes[numDimensions],
                            CkArrayID clientAID, int bufferSize, bool yieldFlag,
                            double progressPeriodInMs, int maxItemsBuffered,
                            int _thresholdFractionNum, int _thresholdFractionDen,
                            int _cutoffFractionNum, int _cutoffFractionDen);
    entry void processLocationRequest(CkArrayIndex arrayId, int deliveredToPe,
                                      int sourcePe);
    entry void resendMisdeliveredItems(CkArrayIndex arrayId, int destinationPe);
    entry void updateLocationAtSource(CkArrayIndex arrayId, int destinationPe);
  };
};
